{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","goods","setGoods","isGoodsVisible","setIsGoodsVisible","maxLength","setMaxLength","preparedGoods","filter","good","length","className","type","onClick","current","reverse","sort","firstGood","secondGood","localeCompare","name","id","value","onChange","event","target","map","el","indexOf","ReactDOM","render","document","getElementById"],"mappings":"iOAGMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA4EaC,EAzEO,WACpB,MAA0BC,mBAAS,GAAD,OAAKF,IAAvC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAmCMC,EAAgBN,EAAMO,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUL,KAE1D,OACE,sBAAKM,UAAU,MAAf,UACE,uCACA,wBAAQC,KAAK,SAASC,QAtCD,WACvBT,GAAkB,SAAAU,GAAO,OAAKA,MAqC5B,SACGX,EAAiB,aAAe,UAElCA,GACC,qCACE,wBAAQS,KAAK,SAASC,QAvCT,WACnBX,EAAS,YAAID,EAAMc,aAsCb,qBACA,wBAAQH,KAAK,SAASC,QApCH,WACzBX,EAAS,YAAID,EAAMe,MAAK,SACtBC,EACAC,GAFsB,OAGnBD,EAAUE,cAAcD,SAgCvB,iCACA,wBAAQN,KAAK,SAASC,QAvBX,WACjBX,EAAS,GAAD,OAAKJ,IACbQ,EAAa,IAqBP,mBACA,wBAAQM,KAAK,SAASC,QA/BT,WACnBX,EAAS,YAAID,EAAMe,MAAK,SACtBC,EACAC,GAFsB,OAGnBD,EAAUP,OAASQ,EAAWR,aA2B7B,4BACA,wBACEU,KAAK,SACLC,GAAG,SACHC,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAxBCF,EAwBsBE,EAAMC,OAAOH,WArBtDhB,GAFwBgB,GADN,IAACA,GAoBb,SAMGrB,EAAMyB,KAAI,SAAAC,GAAE,OACX,wBAAQL,MAAK,UAAKrB,EAAM2B,QAAQD,GAAM,GAAtC,SACG1B,EAAM2B,QAAQD,GAAM,SAI1BpB,EAAcmB,KAAI,SAAAjB,GAAI,OACrB,6BAAgBA,GAAPA,aC9ErBoB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.79591c03.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst App: React.FC = () => {\n  const [goods, setGoods] = useState([...goodsFromServer]);\n  const [isGoodsVisible, setIsGoodsVisible] = useState(false);\n  const [maxLength, setMaxLength] = useState(1);\n\n  const toogleVisibility = () => {\n    setIsGoodsVisible(current => !current);\n  };\n\n  const reverseGoods = () => {\n    setGoods([...goods.reverse()]);\n  };\n\n  const sortAlphaBetically = () => {\n    setGoods([...goods.sort((\n      firstGood,\n      secondGood,\n    ) => firstGood.localeCompare(secondGood))]);\n  };\n\n  const sortByLength = () => {\n    setGoods([...goods.sort((\n      firstGood,\n      secondGood,\n    ) => firstGood.length - secondGood.length)]);\n  };\n\n  const resetGoods = () => {\n    setGoods([...goodsFromServer]);\n    setMaxLength(1);\n  };\n\n  const selectGoods = (value: string) => {\n    const length: number = +value;\n\n    setMaxLength(length);\n  };\n\n  const preparedGoods = goods.filter(good => good.length >= maxLength);\n\n  return (\n    <div className=\"App\">\n      <h1>Goods</h1>\n      <button type=\"button\" onClick={toogleVisibility}>\n        {isGoodsVisible ? 'Hide goods' : 'Start'}\n      </button>\n      {isGoodsVisible && (\n        <>\n          <button type=\"button\" onClick={reverseGoods}>Reverse</button>\n          <button type=\"button\" onClick={sortAlphaBetically}>Sort alphabetically</button>\n          <button type=\"button\" onClick={resetGoods}>Reset</button>\n          <button type=\"button\" onClick={sortByLength}>Sort by length</button>\n          <select\n            name=\"select\"\n            id=\"select\"\n            value={maxLength}\n            onChange={(event) => selectGoods(event.target.value)}\n          >\n            {goods.map(el => (\n              <option value={`${goods.indexOf(el) + 1}`}>\n                {goods.indexOf(el) + 1}\n              </option>\n            ))}\n          </select>\n          {preparedGoods.map(good => (\n            <li key={good}>{good}</li>\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}